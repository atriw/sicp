(define (new-letrec-syntax syntax)
  (define (tagged-list? exp tag)
    (if (pair? exp)
      (eq? (car exp) tag)
      #f))
  (define make-let (syntax 'make-let))
  (define make-quote (syntax 'make-quote))
  (define (make-application operator operands)
    (cons operator operands))

  (define (letrec? exp) (tagged-list? exp 'letrec))
  (define (letrec-bindings exp) (cadr exp))
  (define (letrec-body exp) (cddr exp))
  (define (letrec->combination exp)
    (let ((bindings (letrec-bindings exp)))
      (make-let (map (lambda (binding) (list (car binding) (make-quote '*unassigned*)))
                     bindings)
                (append
                  (map (lambda (binding) (make-application 'set! binding))
                       bindings)
                  (letrec-body exp)))))
  (define (dispatch m)
    (cond ((eq? m 'letrec?) letrec?)
          ((eq? m 'letrec->combination) letrec->combination)
          (else (syntax m))))
  dispatch)
