(define (new-syntax syntax)
  (define (tagged-list? exp tag)
    (if (pair? exp)
      (eq? (car exp) tag)
      #f))
  (define (and? exp) (tagged-list? exp 'and))
  (define (or? exp) (tagged-list? exp 'or))
  (define (dispatch m)
    (cond ((eq? m 'and?) and?)
          ((eq? m 'or?) or?)
          (else (syntax m))))
  dispatch)

(define (make-and-or-implementation evaluator syntax env-model)
  (define no-operands? (syntax 'no-operands?))
  (define first-operand (syntax 'first-operand))
  (define rest-operands (syntax 'rest-operands))
  (define eval (evaluator 'eval))
  (define true? (env-model 'true?))
  (define false? (env-model 'false?))

  (define (eval-and exps env)
    (define true (eval 'true env))
    (define false (eval 'false env))
    (if (no-operands? exps)
      true
      (let ((first (first-operand exps))
            (rest (rest-operands exps)))
        (let ((v (eval first env)))
          (cond ((false? v) false)
                ((no-operands? rest) v)
                (else (eval-and rest env)))))))
  (define (eval-or exps env)
    (if (no-operands? exps)
      (eval 'false env)
      (let ((first (first-operand exps))
            (rest (rest-operands exps)))
        (let ((v (eval first env)))
          (if (true? v)
            v
            (eval-or rest env))))))
  (cons eval-and eval-or))

