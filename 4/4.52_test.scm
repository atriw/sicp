(load "test.scm")
(load "4/4.52.scm")
(load "evaluator_test.scm")
(load "4/4.4.scm")
(load "4/4.6.scm")
(load "stream.scm")
(load "debug.scm")

(define (test)
  (define test-suite
    (setup-test-amb (lambda (syntax) (new-if-fail-syntax (new-derived-and-or-syntax (new-syntax syntax))))
                    '()
                    implement-analyze-if-fail))
  (define (test-fn ambeval env)
    (ambeval '(define (even-of lst)
                (define (even? x) (if (= x 0) true (odd? (- x 1))))
                (define (odd? x) (if (= x 0) false (even? (- x 1))))
                (if-fail (let ((x (an-element-of lst)))
                           (require (even? x))
                           x)
                         'all-odd)) env nop-succeed nop-fail)
    (assert-stream (amb->stream ambeval '(even-of '(1 3 5)) env)
                   (list 'all-odd)
                   "Failed if-fail 1")
    (assert-stream (amb->stream ambeval '(even-of '(1 3 5 8 9 10)) env)
                   (list 8 10 'all-odd)
                   "Failed if-fail 2")
    )
  (test-suite test-fn))
(test)
