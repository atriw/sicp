(define (new-syntax syntax)
  (define (tagged-list? exp tag)
    (if (pair? exp)
      (eq? (car exp) tag)
      #f))
  (define (make-application operator operands)
    (cons operator operands))
  (define make-lambda (syntax 'make-lambda))
  (define make-begin (syntax 'make-begin))
  (define (make-definition name value)
    (list 'define name value))

  (define (let? exp) (tagged-list? exp 'let))
  (define (named-let? exp) (symbol? (cadr exp)))
  (define (let-name exp) (and (named-let? exp) (cadr exp)))
  (define (let-bindings exp)
    (if (named-let? exp)
      (caddr exp)
      (cadr exp)))
  (define (let-body exp)
    (if (named-let? exp)
      (cdddr exp)
      (cddr exp)))
  (define (let-variables exp) (map car (let-bindings exp)))
  (define (let-values exp) (map cadr (let-bindings exp)))
  (define (let->combination exp)
    (if (named-let? exp)
      (make-begin (list (make-definition (let-name exp)
                                         (make-lambda (let-variables exp)
                                                      (let-body exp)))
                        (make-application (let-name exp) (let-values exp))))
      (make-application (make-lambda (let-variables exp)
                                     (let-body exp))
                        (let-values exp))))
  (define (dispatch m)
    (cond ((eq? m 'let?) let?)
          ((eq? m 'let->combination) let->combination)
          (else (syntax m))))
  dispatch)
