(load "test.scm")
(load "4/4.16.scm")
(load "evaluator_test.scm")
(load "4/4.6.scm")

(define (test)
  (define test-suite
    (setup-test new-syntax
                (lambda (env-model) (new-environment-model env-model (new-syntax (make-syntax))))
                '()))
  (define (test-fn eval env)
    (let ((f1 '(define (f1 x)
                 (define (even? n) (if (= n 0) true (odd? (- n 1))))
                 (define (odd? n) (if (= n 0) false (even? (- n 1))))
                 (if (even? x)
                   (* 2 x)
                   (* 3 x))))
          (f2 '(define (f2 x)
                 (define (even? n) (if (= n 0) true (odd? (- n 1))))
                 (if (even? x) (quote even))
                 (define (odd? n) (if (= n 0) false (even? (- n 1))))
                 (if (even? x)
                   (* 2 x)
                   (* 3 x))))
          (f3 '(define (f3 x)
                 (define (even? n) (if (= n 0) true (odd? (- n 1))))
                 (define is-even (even? x))
                 (define (odd? n) (if (= n 0) false (even? (- n 1))))
                 (if is-even
                   (* 2 x)
                   (* 3 x)))))
      (eval f1 env)
      (eval f2 env)
      (eval f3 env)
      (assert-eq 4 (eval '(f1 2) env) "Failed f1")
      (assert-eq 9 (eval '(f2 3) env) "Failed f2")
      (assert-error (lambda () (eval '(f3 2) env)) "Failed f3")))
  (test-suite test-fn))
(test)
