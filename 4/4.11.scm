(define (new-evironment-model env-model)
  (define (enclosing-environment env) (cdr env))
  (define (first-frame env) (car env))
  (define the-empty-environment '())
  (define (make-frame vars vals)
    (cons 'frame (map make-binding vars vals)))
  (define (frame-bindings frame) (cdr frame))
  (define (make-binding var val) (cons var val))
  (define (binding-var binding) (car binding))
  (define (binding-val binding) (cdr binding))
  (define (binding-set-val! binding val) (set-cdr! binding val))
  (define (add-binding-to-frame! var val frame)
    (set-cdr! frame (cons (make-binding var val) (frame-bindings frame))))
  (define (extend-environment vars vals base-env)
    (if (= (length vars) (length vals))
      (cons (make-frame vars vals) base-env)
      (if (< (length vars) (length vals))
        (error "Too many arguments supplied" vars vals)
        (error "Too few arguments supplied" vars vals))))
  (define (lookup-variable-value var env)
    (define (env-loop env)
      (define (scan bindings)
        (cond ((null? bindings)
               (env-loop (enclosing-environment env)))
              ((eq? var (binding-var (car bindings))) (binding-val (car bindings)))
              (else (scan (cdr bindings)))))
      (if (eq? env the-empty-environment)
        (error "Unbound variable" var)
        (scan (frame-bindings (first-frame env)))))
    (env-loop env))
  (define (set-variable-value! var val env)
    (define (env-loop env)
      (define (scan bindings)
        (cond ((null? bindings)
               (env-loop (enclosing-environment env)))
              ((eq? var (binding-var (car bindings))) (binding-set-val! (car bindings) val))
              (else (scan (cdr bindings)))))
      (if (eq? env the-empty-environment)
        (error "Unbound variable: SET!" var)
        (scan (frame-bindings (first-frame env)))))
    (env-loop env))
  (define (define-variable! var val env)
    (let ((frame (first-frame env)))
      (define (scan bindings)
        (cond ((null? bindings)
               (add-binding-to-frame! var val frame))
              ((eq? var (binding-var (car bindings))) (binding-set-val! (car bindings) val))
              (else (scan (cdr bindings)))))
      (scan (frame-bindings frame))))

  (define (dispatch m)
    (cond ((eq? m 'extend-environment) extend-environment)
          ((eq? m 'lookup-variable-value) lookup-variable-value)
          ((eq? m 'set-variable-value!) set-variable-value!)
          ((eq? m 'define-variable!) define-variable!)
          ((eq? m 'the-empty-environment) the-empty-environment)
          (else (env-model m))))
  dispatch)
