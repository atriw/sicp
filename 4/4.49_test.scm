(load "test.scm")
(load "4/4.49.scm")
(load "evaluator_test.scm")
(load "stream.scm")
(load "debug.scm")
(load "parse-sentence-predefines.scm")

(define (test)
  (define (test-fn ambeval env)
    (define-parse-sentence ambeval env)
    (ambeval generate-word env nop-succeed nop-fail)
    (assert-stream (amb->stream ambeval '(parse '()) env)
                   (list '(sentence (simple-noun-phrase (article the) (noun student)) (verb studies))
                         '(sentence (simple-noun-phrase (article the) (noun student)) (verb-phrase (verb studies) (prep-phrase (prep for) (simple-noun-phrase (article the) (noun student)))))
                         '(sentence (simple-noun-phrase (article the) (noun student)) (verb-phrase (verb-phrase (verb studies) (prep-phrase (prep for) (simple-noun-phrase (article the) (noun student)))) (prep-phrase (prep for) (simple-noun-phrase (article the) (noun student)))))
                         '(sentence (simple-noun-phrase (article the) (noun student)) (verb-phrase (verb-phrase (verb-phrase (verb studies) (prep-phrase (prep for) (simple-noun-phrase (article the) (noun student)))) (prep-phrase (prep for) (simple-noun-phrase (article the) (noun student)))) (prep-phrase (prep for) (simple-noun-phrase (article the) (noun student))))))
                   "Failed generate-word")
    )
  (define (test-fn2 ambeval env)
    (define-parse-sentence ambeval env)
    (ambeval generate-word-random env nop-succeed nop-fail)
    (display-stream (amb->stream ambeval '(parse '()) env) 4))
  (full-feature-amb-suite test-fn)
  (full-feature-amb-suite test-fn2))
(test)
