(define (make-list-of-values-left-to-right evaluator syntax)
  (define no-operands? (syntax 'no-operands?))
  (define first-operand (syntax 'first-operand))
  (define rest-operands (syntax 'rest-operands))
  (define eval (evaluator 'eval))

  (define (list-of-values exps env)
    (if (no-operands? exps)
      '()
      (let ((v (eval (first-operand exps) env)))
        (cons v (list-of-values (rest-operands exps) env)))))
  list-of-values)

(define (make-list-of-values-right-to-left evaluator syntax)
  (define no-operands? (syntax 'no-operands?))
  (define first-operand (syntax 'first-operand))
  (define rest-operands (syntax 'rest-operands))
  (define eval (evaluator 'eval))

  (define (list-of-values exps env)
    (if (no-operands? exps)
      '()
      (let ((rest (list-of-values (rest-operands exps) env)))
        (cons (eval (first-operand exps) env) rest))))
  list-of-values)
