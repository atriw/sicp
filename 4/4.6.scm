(define (new-let-syntax syntax)
  (define (tagged-list? exp tag)
    (if (pair? exp)
      (eq? (car exp) tag)
      #f))
  (define (make-application operator operands)
    (cons operator operands))
  (define make-lambda (syntax 'make-lambda))
  (define (let? exp) (tagged-list? exp 'let))
  (define (let-bindings exp) (cadr exp))
  (define (let-body exp) (cddr exp))
  (define (let-variables exp) (map car (let-bindings exp)))
  (define (let-values exp) (map cadr (let-bindings exp)))
  (define (let->combination exp)
    (make-application (make-lambda (let-variables exp)
                                   (let-body exp))
                      (let-values exp)))
  ; Added by Exercise 4.7
  (define (make-let bindings body)
    (append (list 'let bindings) body))
  (define (dispatch m)
    (cond ((eq? m 'let?) let?)
          ((eq? m 'let->combination) let->combination)
          ((eq? m 'make-let) make-let)
          (else (syntax m))))
  dispatch)
