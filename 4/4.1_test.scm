(load "test.scm")
(load "4/4.1.scm")
(load "evaluator.scm")
(load "environment.scm")
(load "syntax.scm")

(define probe-procedure
  '(define (probe) (define s 1) (+ (begin (set! s (+ s 1)) s)
                                   (begin (set! s (* s 2)) s))))
(define (test make-list-of-values want msg)
  (let ((syntax (make-syntax))
        (env-model (make-environment-model)))
    (let ((evaluator (make-evaluator syntax env-model))
          (the-global-environment ((env-model 'setup-environment))))
      (let ((list-of-values (make-list-of-values evaluator syntax)))
        ((evaluator 'mock-list-of-values) list-of-values)
        ((evaluator 'eval) probe-procedure the-global-environment)
        (assert-eq want ((evaluator 'eval) '(probe) the-global-environment) msg)))))
(test make-list-of-values-left-to-right 6 "Failed list-of-values left to right")
(test make-list-of-values-right-to-left 5 "Failed list-of-values right to left")
