(define (new-syntax syntax)
  (define sequence->exp (syntax 'sequence->exp))
  (define make-if (syntax 'make-if))
  (define (make-application operator operands)
    (cons operator operands))

  (define (cond-clauses exp) (cdr exp))
  (define (cond-else-clause? clause)
    (eq? (cond-predicate clause) 'else))
  (define (cond-recipient-clause? clause)
    (and (not (null? (cond-actions clause)))
         (eq? (car (cond-actions clause)) '=>)))
  (define (cond-recipient clause) (caddr clause))
  (define (cond-predicate clause) (car clause))
  (define (cond-actions clause) (cdr clause))
  (define (cond->if exp) (expand-clauses (cond-clauses exp)))
  (define (expand-clauses clauses)
    (if (null? clauses)
      'false
      (let ((first (car clauses))
            (rest (cdr clauses)))
        (cond ((cond-else-clause? first)
               (if (null? rest)
                 (sequence->exp (cond-actions first))
                 (error "ELSE clause isn't last: COND->IF" clauses)))
              ((cond-recipient-clause? first)
               (make-if (cond-predicate first)
                        (make-application (cond-recipient first) (list (cond-predicate first)))
                        (expand-clauses rest)))
              (else
                (make-if (cond-predicate first)
                         (sequence->exp (cond-actions first))
                         (expand-clauses rest)))))))
  (define (dispatch m)
    (cond ((eq? m 'cond->if) cond->if)
          (else (syntax m))))
  dispatch)
