(load "test.scm")
(load "4/4.44.scm")
(load "evaluator_test.scm")
(load "stream.scm")
(load "debug.scm")

(define (test bench?)
  (define (test-fn ambeval env)
    (ambeval queens env nop-succeed nop-fail)
    (let ((want-1 (list (list (cons 1 1))))
          (want-2 '())
          (want-3 '())
          (want-4 (list (list (cons 2 1) (cons 4 2) (cons 1 3) (cons 3 4))
                        (list (cons 3 1) (cons 1 2) (cons 4 3) (cons 2 4)))))
      (assert-stream (amb->stream ambeval '(queens 1) env) want-1 "Failed queens 1")
      (assert-stream (amb->stream ambeval '(queens 2) env) want-2 "Failed queens 2")
      (assert-stream (amb->stream ambeval '(queens 3) env) want-3 "Failed queens 3")
      (assert-stream (amb->stream ambeval '(queens 4) env) want-4 "Failed queens 4"))
    )
  (define (bench-fn ambeval env)
    (ambeval queens env nop-succeed nop-fail)
    (with-print-time drain-amb ambeval '(queens 7) env))
  (if bench?
    (full-feature-amb-suite bench-fn)
    (full-feature-amb-suite test-fn)))
(test #f)
;(test #t)
