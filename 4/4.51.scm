(define (implement-analyze-permanent-assignment evaluator syntax env-model)
  (define analyze (evaluator 'analyze))
  (define assignment-variable (syntax 'assignment-variable))
  (define assignment-value (syntax 'assignment-value))
  (define lookup-variable-value (env-model 'lookup-variable-value))
  (define set-variable-value! (env-model 'set-variable-value!))

  (define (analyze-permanent-assignment exp)
    (let ((var (assignment-variable exp))
          (vproc (analyze (assignment-value exp))))
      (lambda (env succeed fail)
        (vproc env
               (lambda (val fail2)
                 (set-variable-value! var val env)
                 (succeed 'ok fail2))
               fail))))
  ((evaluator 'implement-analyze-permanent-assignment) analyze-permanent-assignment))

(define (new-permanent-assignment-syntax syntax)
  (define (tagged-list? exp tag)
    (if (pair? exp)
      (eq? (car exp) tag)
      #f))
  (define (permanent-assignment? exp) (tagged-list? exp 'permanent-set!))
  (define (dispatch m)
    (cond ((eq? m 'permanent-assignment?) permanent-assignment?)
          (else (syntax m))))
  dispatch)
