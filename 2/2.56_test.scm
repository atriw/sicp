(load "../test.scm")
(load "2.56.scm")

(define (test)
    (let ((e1 (make-exponentiation (make-sum 'x 1) 'y))
          (e2 (make-exponentiation (make-product 'x 'y) 'y))
          (e3 (make-exponentiation 'x 'x))
          (e4 (make-exponentiation 'x 2))
          (e5 (make-exponentiation 'x 1))
          (e6 (make-exponentiation (make-product 3 'x) 0))
          (want1 (make-product 'y (make-exponentiation (make-sum 'x 1) (make-sum 'y -1))))
          (want2 (make-product 'y
                               (make-product
                                 (make-exponentiation (make-product 'x 'y) (make-sum 'y -1))
                                 'y)))
          (want3 (make-product 'x (make-exponentiation 'x (make-sum 'x -1))))
          (want4 (make-product 2 'x))
          (want5 1)
          (want6 0))
      (begin (assert-eq want1 (deriv e1 'x) "Failed e1")
             (assert-eq want2 (deriv e2 'x) "Failed e2")
             (assert-eq want3 (deriv e3 'x) "Failed e3")
             (assert-eq want4 (deriv e4 'x) "Failed e4")
             (assert-eq want5 (deriv e5 'x) "Failed e5")
             (assert-eq want6 (deriv e6 'x) "Failed e6"))))
(test)
