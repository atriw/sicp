(load "test.scm")
(load "2/2.42.scm")
(load "debug.scm")

(define (test)
  (let ((want-1 (list (list (make-position 1 1))))
        (want-2 '())
        (want-3 '())
        (want-4 (list (list (make-position 2 1) (make-position 4 2) (make-position 1 3) (make-position 3 4))
                      (list (make-position 3 1) (make-position 1 2) (make-position 4 3) (make-position 2 4))))
        (want-8 92))
    (begin (assert-eq want-1 (queens 1) "Failed queens 1")
           (assert-eq want-2 (queens 2) "Failed queens 2")
           (assert-eq want-3 (queens 3) "Failed queens 3")
           (assert-eq want-4 (queens 4) "Failed queens 4")
           (assert-eq want-8 (length (queens 8)) "Failed queens 8"))))
(test)

(define (benchmark)
  (display "Benchmark queens 4")
  (with-print-time queens 4)
  (display "Benchmark queens 5")
  (with-print-time queens 5)
  (display "Benchmark queens 6")
  (with-print-time queens 6)
  (display "Benchmark queens 7")
  (with-print-time queens 7)
  (display "Benchmark queens 8")
  (with-print-time queens 8))
(benchmark)
