(load "../tree-set.scm")
(load "2.63.scm")

(define (union-set set1 set2)
    (define (union-list-set l1 l2)
      (cond ((null? l1) l2)
            ((null? l2) l1)
            (else
              (let ((x1 (car l1))
                    (x2 (car l2)))
                (cond ((< x1 x2) (cons x1 (union-list-set (cdr l1) l2)))
                      ((> x1 x2) (cons x2 (union-list-set l1 (cdr l2))))
                      ((= x1 x2) (cons x1 (union-list-set (cdr l1) (cdr l2)))))))))
    (cond ((null? set1) set2)
          ((null? set2) set1)
          (else (list->tree (union-list-set (tree->list-2 set1) (tree->list-2 set2))))))

(define (intersection-set set1 set2)
  (define (intersection-list-set l1 l2)
    (cond ((or (null? l1) (null? l2)) '())
          (else
            (let ((x1 (car l1))
                  (x2 (car l2)))
              (cond ((= x1 x2) (cons x1 (intersection-list-set (cdr l1) (cdr l2))))
                    ((< x1 x2) (intersection-list-set (cdr l1) l2))
                    ((> x1 x2) (intersection-list-set l1 (cdr l2))))))))
  (cond ((or (null? set1) (null? set2)) '())
        (else (list->tree (intersection-list-set (tree->list-2 set1) (tree->list-2 set2))))))
