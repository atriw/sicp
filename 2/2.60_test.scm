(load "../test.scm")
(load "2.60.scm")

(define (test)
  (let ((set1 (list 2 3 2 1 3 2 2))
        (set2 (list 4 4 5 2 6)))
    (let ((set-adj (adjoin-set 4 (adjoin-set 7 set1))))
      (let ((set-intersect (intersection-set set-adj set2))
            (set-union (union-set set-adj set2)))
        (begin (assert-eq #t (element-of-set? 4 set-adj) "Failed")
               (assert-eq #t (element-of-set? 7 set-adj) "Failed")
               (assert-eq #t (element-of-set? 2 set-intersect) "Failed")
               (assert-eq #t (element-of-set? 4 set-intersect) "Failed")
               (assert-eq #t (element-of-set? 1 set-union) "Failed")
               (assert-eq #t (element-of-set? 2 set-union) "Failed")
               (assert-eq #t (element-of-set? 3 set-union) "Failed")
               (assert-eq #t (element-of-set? 4 set-union) "Failed")
               (assert-eq #t (element-of-set? 5 set-union) "Failed")
               (assert-eq #t (element-of-set? 6 set-union) "Failed")
               (assert-eq #t (element-of-set? 7 set-union) "Failed")
               (assert-eq #f (element-of-set? 1 set-intersect) "Failed")
               (assert-eq #f (element-of-set? 3 set-intersect) "Failed")
               (assert-eq #f (element-of-set? 5 set-intersect) "Failed")
               (assert-eq #f (element-of-set? 6 set-intersect) "Failed")
               (assert-eq #f (element-of-set? 7 set-intersect) "Failed"))))))
(test)
