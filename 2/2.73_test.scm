(load "../test.scm")
(load "2.73.scm")

(define (test)
  (let ((e1 (make-sum (make-product 3 'x) (make-product 'y 'x)))
        (e2 (make-product (make-sum 3 'x) 'x))
        (e3 (make-exponentiation (make-sum 'x 1) 'y))
        (e4 (make-exponentiation (make-product 'x 'y) 'y))
        (e5 (make-exponentiation 'x 'x))
        (e6 (make-exponentiation 'x 2))
        (e7 (make-exponentiation 'x 1))
        (e8 (make-exponentiation (make-product 3 'x) 0))
        (want1 '(+ 3 y))
        (want2 '(+ (+ 3 x) x))
        (want3 '(* y (** (+ x 1) (+ y -1))))
        (want4 '(* y (* (** (* x y) (+ y -1)) y)))
        (want5 '(* x (** x (+ x -1))))
        (want6 '(* 2 x))
        (want7 1)
        (want8 0))
    (begin (assert-eq want1 (deriv e1 'x) "Failed")
           (assert-eq want2 (deriv e2 'x) "Failed")
           (assert-eq want3 (deriv e3 'x) "Failed")
           (assert-eq want4 (deriv e4 'x) "Failed")
           (assert-eq want5 (deriv e5 'x) "Failed")
           (assert-eq want6 (deriv e6 'x) "Failed")
           (assert-eq want7 (deriv e7 'x) "Failed")
           (assert-eq want8 (deriv e8 'x) "Failed"))))
(test)
