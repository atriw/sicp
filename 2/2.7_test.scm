(load "test.scm")
(load "2/2.7.scm")

(define (test)
  (let ((i1 (make-interval 1 2))
        (i2 (make-interval 3 4)))
    (let ((i-add (add-interval i1 i2))
          (i-mul (mul-interval i1 i2))
          (i-div (div-interval i1 i2)))
      (begin (assert-eq 4 (lower-bound i-add) "Failed add lower-bound")
             (assert-eq 6 (upper-bound i-add) "Failed add upper-bound")
             (assert-eq 3 (lower-bound i-mul) "Failed mul lower-bound")
             (assert-eq 8 (upper-bound i-mul) "Failed mul upper-bound")
             (assert-eq (/ 1.0 4.0) (lower-bound i-div) "Failed div lower-bound")
             (assert-eq (/ 2.0 3.0) (upper-bound i-div) "Failed div upper-bound")))))
(test)
