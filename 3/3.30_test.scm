(load "test.scm")
(load "3/3.30.scm")

(define (test)
  (let ((a1 (make-wire))
        (a2 (make-wire))
        (a3 (make-wire))
        (a4 (make-wire))
        (b1 (make-wire))
        (b2 (make-wire))
        (b3 (make-wire))
        (b4 (make-wire))
        (s1 (make-wire))
        (s2 (make-wire))
        (s3 (make-wire))
        (s4 (make-wire))
        (c (make-wire)))
    (probe 'a1 a1)
    (probe 'a2 a2)
    (probe 'a3 a3)
    (probe 'a4 a4)
    (probe 'b1 b1)
    (probe 'b2 b2)
    (probe 'b3 b3)
    (probe 'b4 b4)
    (probe 's1 s1)
    (probe 's2 s2)
    (probe 's3 s3)
    (probe 's4 s4)
    (probe 'c c)
    (ripple-carry-adder (list a1 a2 a3 a4) (list b1 b2 b3 b4) (list s1 s2 s3 s4) c)
    ; a: 1001 (1 0 0 1)
    ; b: 0011 (1 1 0 0)
    ; s: 1100 (0 0 1 1)
    ; c: 0
    (after-delay 5 (lambda () (set-signal! a1 1)))
    (after-delay 5 (lambda () (set-signal! a2 0)))
    (after-delay 5 (lambda () (set-signal! a3 0)))
    (after-delay 5 (lambda () (set-signal! a4 1)))
    (after-delay 5 (lambda () (set-signal! b1 1)))
    (after-delay 5 (lambda () (set-signal! b2 1)))
    (after-delay 5 (lambda () (set-signal! b3 0)))
    (after-delay 5 (lambda () (set-signal! b4 0)))
    (after-delay 5 (lambda () (set-signal! c 0)))
    (propagate)
    (assert-eq 0 (get-signal s1) "Failed signal s1")
    (assert-eq 0 (get-signal s2) "Failed signal s2")
    (assert-eq 1 (get-signal s3) "Failed signal s3")
    (assert-eq 1 (get-signal s4) "Failed signal s4")))
(test)

