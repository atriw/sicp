(define (make-deque-node item prev next) (list item prev next))
(define (node-item node) (car node))
(define (node-prev node) (cadr node))
(define (node-next node) (caddr node))
(define (node-set-prev! node prev) (set-car! (cdr node) prev))
(define (node-set-next! node next) (set-car! (cddr node) next))

(define empty-node (make-deque-node '() '() '()))

(define (make-deque) (cons empty-node empty-node))
(define (front-ptr deque) (car deque))
(define (rear-ptr deque) (cdr deque))
(define (set-front-ptr! deque item) (set-car! deque item))
(define (set-rear-ptr! deque item) (set-cdr! deque item))

(define (empty-deque? deque)
  (or (eq? empty-node (front-ptr deque))
      (eq? empty-node (rear-ptr deque))))
(define (front-deque deque)
  (if (empty-deque? deque)
    (error "FRONT called with an empty deque")
    (node-item (front-ptr deque))))
(define (rear-deque deque)
  (if (empty-deque? deque)
    (error "REAR called with an empty deque")
    (node-item (rear-ptr deque))))
(define (front-insert-deque! deque item)
  (cond ((empty-deque? deque)
         (let ((new-node (make-deque-node item empty-node empty-node)))
           (set-front-ptr! deque new-node)
           (set-rear-ptr! deque new-node)
           deque))
        (else
          (let ((new-node (make-deque-node item empty-node (front-ptr deque))))
            (node-set-prev! (front-ptr deque) new-node)
            (set-front-ptr! deque new-node)
            deque))))
(define (rear-insert-deque! deque item)
  (cond ((empty-deque? deque)
         (let ((new-node (make-deque-node item empty-node empty-node)))
           (set-front-ptr! deque new-node)
           (set-front-ptr! deque new-node)
           deque))
        (else
          (let ((new-node (make-deque-node item (rear-ptr deque) empty-node)))
            (node-set-next! (rear-ptr deque) new-node)
            (set-rear-ptr! deque new-node)
            deque))))
(define (front-delete-deque! deque)
  (cond ((empty-deque? deque)
         (error "FRONT-DELETE called with an empty deque"))
        (else
          (node-set-prev! (node-next (front-ptr deque)) empty-node)
          (set-front-ptr! deque (node-next (front-ptr deque)))
          deque)))
(define (rear-delete-deque! deque)
  (cond ((empty-deque? deque)
         (error "REAR-DELETE called with an empty deque"))
        (else
          (node-set-next! (node-prev (rear-ptr deque)) empty-node)
          (set-rear-ptr! deque (node-prev (rear-ptr deque)))
          deque)))

