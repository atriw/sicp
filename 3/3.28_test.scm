(load "test.scm")
(load "3/3.28.scm")

(define (test)
  (let ((a (make-wire))
        (b (make-wire))
        (c (make-wire)))
    (or-gate a b c)
    (probe 'a a)
    (probe 'b b)
    (probe 'c c)
    (after-delay 3 (lambda () (set-signal! a 1)))
    (propagate)
    (assert-eq (+ 3 or-gate-delay) (current-time the-agenda) "Failed agenda current time")
    (assert-eq 1 (get-signal a) "Failed signal a")
    (assert-eq 0 (get-signal b) "Failed signal b")
    (assert-eq 1 (get-signal c) "Failed signal c")))
(test)
