(load "../test.scm")
(load "./3.24.scm")

(define (test)
  (define (same-key-with-tolerant? tol)
    (lambda (x y)
      (if (not (and (number? x) (number? y)))
        (error "not a number" x y)
        (< (abs (- x y)) tol))))
  (let ((exact-table (make-table equal?))
        (tolerant-table (make-table (same-key-with-tolerant? 0.5))))
    ((exact-table 'insert!) 1 2)
    ((exact-table 'insert!) 1 3)
    ((exact-table 'insert!) 2 4)
    (assert-eq 3 ((exact-table 'lookup) 1) "Failed exact table lookup 1")
    (assert-eq 4 ((exact-table 'lookup) 2) "Failed exact table lookup 2")
    (assert-eq #f ((exact-table 'lookup) 3) "Failed exact table lookup 3")
    ((tolerant-table 'insert!) 0.7 2)
    ((tolerant-table 'insert!) 0.9 2)
    ((tolerant-table 'insert!) 2 4)
    (assert-eq 2 ((tolerant-table 'lookup) 0.7) "Failed tolerant table lookup 1")
    (assert-eq 2 ((tolerant-table 'lookup) 0.9) "Failed tolerant table lookup 2")
    (assert-eq 2 ((tolerant-table 'lookup) 0.3) "Failed tolerant table lookup 3")
    (assert-eq #f ((tolerant-table 'lookup) 1.2) "Failed tolerant table lookup 4")
    (assert-eq 4 ((tolerant-table 'lookup) 2) "Failed tolerant table lookup 5")
    (assert-eq #f ((tolerant-table 'lookup) 2.5) "Failed tolerant table lookup 6")))
(test)
