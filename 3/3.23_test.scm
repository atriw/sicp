(load "test.scm")
(load "3/3.23.scm")

(define (test)
  (let ((deque (make-deque)))
    (front-insert-deque! deque 1)
    (rear-insert-deque! deque 2)
    (assert-eq 1 (front-deque deque) "Failed front deque 1")
    (assert-eq 2 (rear-deque deque) "Failed rear deque 1")
    (front-insert-deque! deque 3)
    (front-insert-deque! deque 4)
    (rear-insert-deque! deque 5)
    (rear-insert-deque! deque 6)
    ; (4 3 1 2 5 6)
    (front-delete-deque! deque)
    (assert-eq 3 (front-deque deque) "Failed front deque 2")
    (assert-eq 6 (rear-deque deque) "Failed rear deque 2")
    (rear-delete-deque! deque)
    (assert-eq 5 (rear-deque deque) "Failed rear deque 3")
    (assert-eq 3 (front-deque deque) "Failed front deque 3")
    (rear-delete-deque! deque)
    (rear-delete-deque! deque)
    (front-delete-deque! deque)
    (front-delete-deque! deque)
    (assert-eq #t (empty-deque? deque) "Failed empty deque")
    (assert-error (lambda () (front-delete-deque! deque)) "Failed front delete error test")
    (assert-error (lambda () (rear-delete-deque! deque)) "Failed rear delete error test")))
(test)
