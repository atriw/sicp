(define (make-table)
  (let ((local-table (list '*table*)))
    (define (same-key? l1 l2)
      (cond ((equal? l1 l2) #t)
            ((and (number? l1) (number? l2)) (equal? l1 l2))
            ((and (null? l1) (null? l2)) #t)
            ((and (pair? l1) (pair? l2)) (and (equal? (car l1) (car l2)) (same-key? (cdr l1) (cdr l2))))
            (else #f)))
    (define (assoc key records)
      (cond ((null? records) #f)
            ((same-key? key (caar records)) (car records))
            (else (assoc key (cdr records)))))
    (define (lookup key)
      (let ((record (assoc key (cdr local-table))))
        (if record
          (cdr record)
          #f)))
    (define (insert! key value)
      (let ((record (assoc key (cdr local-table))))
        (if record
          (set-cdr! record value)
          (set-cdr! local-table
                    (cons (cons key value)
                          (cdr local-table)))))
      'ok)
    (define (dispatch m)
      (cond ((eq? m 'lookup) lookup)
            ((eq? m 'insert!) insert!)
            (else (error "Unknown operation: TABLE" m))))
    dispatch))
