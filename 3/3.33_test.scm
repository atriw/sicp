(load "test.scm")
(load "3/3.33.scm")

(define (test)
  (let ((a (make-connector))
        (b (make-connector))
        (c (make-connector)))
    (probe "a" a)
    (probe "b" b)
    (probe "c" c)
    (averager a b c)
    (set-value! a 4 'user)
    (set-value! b 8 'user)
    (assert-eq 6 (get-value c) "Failed get value average")
    (assert-error (lambda () (set-value! c 7 'user)) "Failed error test")
    (forget-value! a 'user)
    (assert-eq #f (has-value? a) "Failed has value a after forget a")
    (assert-eq #t (has-value? b) "Failed has value b after forget a")
    (assert-eq #f (has-value? c) "Failed has value c after forget a")
    (forget-value! b 'user)
    (set-value! c 12 'user)
    (set-value! a 16 'user)
    (assert-eq 8 (get-value b) "Failed get value b")))
(test)
