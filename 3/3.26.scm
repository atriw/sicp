(define (make-table equal-key? less-key?)
  (define entry-key car)
  (define entry-value cdr)
  (define make-entry cons)
  (define entry car)
  (define left-branch cadr)
  (define right-branch caddr)
  (define make-tree list)
  (let ((local-table (list '*table*)))
    (define (assoc key tree)
      (cond ((null? tree) #f)
            ((equal-key? key (entry-key (entry tree))) (entry tree))
            ((less-key? key (entry-key (entry tree)))
             (assoc key (left-branch tree)))
            (else
              (assoc key (right-branch tree)))))
    (define (adjoin key value tree)
      (cond ((null? tree) (make-tree (make-entry key value) '() '()))
            ((equal-key? key (entry-key (entry tree))) tree)
            ((less-key? key (entry-key (entry tree)))
             (make-tree (entry tree)
                        (adjoin key value (left-branch tree))
                        (right-branch tree)))
            (else
              (make-tree (entry tree)
                         (left-branch tree)
                         (adjoin key value (right-branch tree))))))
    (define (lookup key)
      (let ((record (assoc key (cdr local-table))))
        (if record
          (cdr record)
          #f)))
    (define (insert! key value)
      (let ((record (assoc key (cdr local-table))))
        (if record
          (set-cdr! record value)
          (set-cdr! local-table
                    (adjoin key value (cdr local-table)))))
      'ok)
    (define (dispatch m)
      (cond ((eq? m 'lookup) lookup)
            ((eq? m 'insert!) insert!)
            (else (error "Unknown operation: TABLE" m))))
    dispatch))
