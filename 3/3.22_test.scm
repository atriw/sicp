(load "../test.scm")
(load "./3.22.scm")

(define (test)
  (let ((q (make-queue)))
    ((q 'insert-queue!) 1)
    (assert-eq 1 (q 'front-queue) "Failed front-queue 1")
    ((q 'insert-queue!) 2)
    ((q 'insert-queue!) 3)
    (assert-eq 1 (q 'front-queue) "Failed front-queue 2")
    (q 'delete-queue!)
    (assert-eq 2 (q 'front-queue) "Failed front-queue 3")
    (q 'delete-queue!)
    (assert-eq 3 (q 'front-queue) "Failed front-queue 4")
    (q 'delete-queue!)
    (assert-eq #t (q 'empty-queue?) "Failed empty queue")
    (assert-error (lambda () (q 'front-queue)) "Failed error test")))
(test)
